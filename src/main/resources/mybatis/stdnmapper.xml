<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myadmin.mapper.StdnMapper">

    <select id="topsbj" resultType="Stdn">
        SELECT sbj, count
        FROM
            (
            SELECT sbj, COUNT(*) AS count
            FROM
                (
                SELECT sbj1 AS sbj FROM stdn
                UNION ALL
                SELECT sbj2 AS sbj FROM stdn
                UNION ALL
                SELECT sbj3 AS sbj FROM stdn
                )
            GROUP BY sbj
            ORDER BY count DESC
            )
        WHERE ROWNUM &lt;=5
    </select>

    <select id="getpage" resultType="Stdn">
        SELECT l.img, l.id, l.name, l.is_attend AS isAttend, l.email, l.contact, l.rdate AS attdDate, l.is_join AS isJoin
        FROM (
            SELECT s.img, s.id, s.name, a.is_attend, s.email, s.contact, a.rdate, s.is_join, ROW_NUMBER() OVER (PARTITION BY s.id ORDER BY (TO_DATE(a.rdate, 'YYYY.MM.DD')) DESC) AS rn
            FROM stdn s
            LEFT OUTER JOIN attd a ON s.id = a.stdn_id
        ) l
        WHERE l.is_join = 1 AND l.rn = 1
        ORDER BY name
    </select>
    <select id="searchpage" resultType="Stdn" parameterType="StdnSearch">
        SELECT l.img, l.id, l.name, l.is_attend AS isAttend, l.email, l.contact, l.rdate AS attdDate, l.is_join AS isJoin
        FROM (
        SELECT s.img, s.id, s.name, a.is_attend, s.email, s.contact, a.rdate, s.is_join, ROW_NUMBER() OVER (PARTITION BY s.id ORDER BY (TO_DATE(a.rdate, 'YYYY.MM.DD')) DESC) AS rn
        FROM stdn s
        LEFT OUTER JOIN attd a ON s.id = a.stdn_id
        ) l
        WHERE l.is_join = 1 AND l.rn = 1
        <if test="search1 != ''">
            AND id LIKE '%' ||  #{search1} || '%'
        </if>
        <if test="search2 != ''">
            AND name LIKE '%' ||  #{search2} || '%'
        </if>
        ORDER BY name
    </select>
    <select id="approve" parameterType="String" resultType="Stdn">
        SELECT *
        FROM stdn
        WHERE is_join = '0'
        ORDER BY name
    </select>
    <select id="approvesearch" parameterType="String" resultType="Stdn">
        SELECT *
        FROM stdn
        WHERE is_join = '0'
        <if test="search1 != ''">
            AND id LIKE '%' ||  #{search1} || '%'
        </if>
        <if test="search2 != ''">
            AND name LIKE '%' ||  #{search2} || '%'
        </if>
        ORDER BY name
    </select>
    <update id="joinupdate" parameterType="String">
        UPDATE stdn
        SET is_join='1'
        WHERE id=#{id}
    </update>
    <select id="totalattd" resultType="Stdn">
        SELECT l.id, l.rdate AS attdDate, l.is_join AS isJoin
        FROM (
                 SELECT s.id, a.rdate, s.is_join, ROW_NUMBER() OVER (PARTITION BY s.id ORDER BY (TO_DATE(a.rdate, 'YYYY.MM.DD')) DESC) AS rn
                 FROM stdn s
                 LEFT OUTER JOIN attd a ON s.id = a.stdn_id
             ) l
        WHERE l.is_join != 0 AND l.rn = 1
    </select>
    <select id="absent" resultType="Stdn">
        SELECT l.img, l.id, l.name, l.is_attend AS isAttend, l.email, l.contact, l.rdate AS attdDate, l.is_join AS isJoin
        FROM (
                 SELECT s.img, s.id, s.name, a.is_attend, a.start_time, s.email, s.contact, a.rdate, s.is_join, ROW_NUMBER() OVER (PARTITION BY s.id ORDER BY (TO_DATE(a.rdate, 'YYYY.MM.DD')) DESC) AS rn
                 FROM stdn s
                          LEFT OUTER JOIN attd a ON s.id = a.stdn_id
             ) l
        WHERE l.is_join = 1 AND l.rn = 1 AND (l.start_time IS NULL OR l.start_time = '')
        ORDER BY l.name
    </select>
<!--    <select id="latestdn" resultType="Stdn">-->
<!--        SELECT l.id, l.rdate AS attdDate, l.is_join AS isJoin-->
<!--        FROM (-->
<!--                 SELECT s.id, a.rdate, s.is_join, ROW_NUMBER() OVER (PARTITION BY s.id ORDER BY (TO_DATE(a.rdate, 'YYYY.MM.DD')) DESC) AS rn-->
<!--                 FROM stdn s-->
<!--                          LEFT OUTER JOIN attd a ON s.id = a.stdn_id-->
<!--             ) l-->
<!--        WHERE l.is_join != 0 AND l.rn = 1-->
<!--    </select>-->

    <select id="select" parameterType="String" resultType="Stdn">
        SELECT id, pwd, name, email, contact, img, birthday, is_subsc as isSubsc, cpn, is_exit as isExit, exit_date as exitDate, last_visit as lastVisit, is_join as isJoin, sbj1, sbj2, sbj3, login_error as loginError
        FROM stdn
        WHERE id=#{id}
    </select>
    <select id="selectall" resultType="Stdn">
        SELECT id, pwd, name, email, contact, img, birthday, is_subsc as isSubsc, cpn, is_exit as isExit, exit_date as exitDate, last_visit as lastVisit, is_join as isJoin, sbj1, sbj2, sbj3, login_error as loginError
        FROM stdn
        ORDER BY name
    </select>

    <insert id="insert" parameterType="Stdn">
        INSERT INTO stdn (id, pwd, name, email, contact, is_join)
        VALUES (#{id}, #{pwd}, #{name}, #{email}, #{contact}, '1')
    </insert>
    <update id="update" parameterType="Stdn">
        UPDATE stdn
        SET pwd=#{pwd}, name=#{name}, email=#{email}, contact=#{contact}
        WHERE id=#{id}
    </update>
    <delete id="delete" parameterType="String">
        DELETE
        FROM stdn
        WHERE id=#{id}
    </delete>

    <select id = "topstdn" resultType="Stdn">
        SELECT s.name, s.id, s.img, SUM(t.score) AS topScore, COUNT(st.id) AS topStdy, COUNT(at.id) AS topAttd, COUNT(l.id) As topLec
        FROM stdn s
                 LEFT JOIN curri c ON s.id = c.stdn_id
                 LEFT JOIN test t ON s.id = t.stdn_id
                 LEFT JOIN stdy st ON s.id = st.writer
                 LEFT JOIN attd at ON s.id = at.stdn_id
                 LEFT JOIN lec_review l ON s.id = l.stdn_id
        WHERE s.id = (
            SELECT stdn_id
            FROM (
                    SELECT s.id AS stdn_id, ROW_NUMBER() OVER (ORDER BY SUM(t.score) DESC) AS row_num
                    FROM stdn s
                    LEFT JOIN test t ON s.id = t.stdn_id
                    GROUP BY s.id
                    )
            WHERE row_num = 1
            )
        GROUP BY s.id, s.name, s.img
    </select>

    <select id = "topfront" resultType="Stdn">
        SELECT s.name, s.id, s.img, SUM(t.score) AS topScore, COUNT(st.id) AS topStdy, COUNT(at.id) AS topAttd, COUNT(l.id) As topLec
        FROM stdn s
                 LEFT JOIN curri c ON s.id = c.stdn_id
                 LEFT JOIN test t ON s.id = t.stdn_id
                 LEFT JOIN stdy st ON s.id = st.writer
                 LEFT JOIN attd at ON s.id = at.stdn_id
            LEFT JOIN lec_review l ON s.id = l.stdn_id
        WHERE s.id = (
            SELECT stdn_id
            FROM (
            SELECT s.id AS stdn_id, ROW_NUMBER() OVER (ORDER BY SUM(t.id) DESC) AS row_num
            FROM stdn s
            LEFT JOIN test t ON s.id = t.stdn_id
            WHERE t.sbj = 'frontend'
            GROUP BY s.id
            )
            WHERE row_num = 1
            )
        GROUP BY s.id, s.name, s.img
    </select>

    <select id = "topback" resultType="Stdn">
        SELECT s.name, s.id, s.img, SUM(t.score) AS topScore, COUNT(st.id) AS topStdy, COUNT(at.id) AS topAttd, COUNT(l.id) As topLec
        FROM stdn s
                 LEFT JOIN curri c ON s.id = c.stdn_id
                 LEFT JOIN test t ON s.id = t.stdn_id
                 LEFT JOIN stdy st ON s.id = st.writer
                 LEFT JOIN attd at ON s.id = at.stdn_id
            LEFT JOIN lec_review l ON s.id = l.stdn_id
        WHERE s.id = (
            SELECT stdn_id
            FROM (
            SELECT s.id AS stdn_id, ROW_NUMBER() OVER (ORDER BY SUM(t.id) DESC) AS row_num
            FROM stdn s
            LEFT JOIN test t ON s.id = t.stdn_id
            WHERE t.sbj = 'backend'
            GROUP BY s.id
            )
            WHERE row_num = 1
            )
        GROUP BY s.id, s.name, s.img
    </select>
</mapper>